{
  "functions": [
    {
      "name": "useBoolean"
    },
    {
      "name": "useCookieState",
      "description": "一个可以将状态存储在 Cookie 中的 Hook 。"
    },
    {
      "name": "useDebounce",
      "description": "用来处理防抖值的 Hook。"
    },
    {
      "name": "useDebounceFn",
      "description": "用来处理防抖函数的 Hook。"
    },
    {
      "name": "useGetState",
      "description": "给 `React.useState` 增加了一个 getter 方法，以获取当前最新值。"
    },
    {
      "name": "useLatest",
      "description": "返回当前最新值的 Hook，可以避免闭包问题。"
    },
    {
      "name": "useLocalStorageState",
      "description": "将状态存储在 localStorage 中的 Hook 。"
    },
    {
      "name": "useMap",
      "description": "管理 Map 类型状态的 Hook。"
    },
    {
      "name": "useMemoizedFn",
      "description": "持久化 function 的 Hook，理论上，可以使用 useMemoizedFn 完全代替 useCallback。"
    },
    {
      "name": "usePrevious",
      "description": "保存上一次状态的 Hook。"
    },
    {
      "name": "useResetState",
      "description": "提供重置 state 方法的 Hooks，用法与 `React.useState` 基本一致。"
    },
    {
      "name": "useSafeState",
      "description": "用法与 `React.useState` 完全一样，但是在组件卸载后异步回调内的 `setState` 不再执行，避免因组件卸载后更新状态而导致的内存泄漏。"
    },
    {
      "name": "useSessionStorageState",
      "description": "将状态存储在 sessionStorage 中的 Hook。"
    },
    {
      "name": "useSet",
      "description": "管理 Set 类型状态的 Hook。"
    },
    {
      "name": "useSetState",
      "description": "管理 object 类型 state 的 Hooks，用法与 class 组件的 `this.setState` 基本一致。"
    },
    {
      "name": "useThrottle",
      "description": "用来处理节流值的 Hook。"
    },
    {
      "name": "useThrottleFn",
      "description": "用来处理函数节流的 Hook。"
    },
    {
      "name": "useToggle",
      "description": "用于在两个状态值间切换的 Hook。"
    },
    {
      "name": "useUnmount",
      "description": "在组件卸载（unmount）时执行的 Hook。"
    },
    {
      "name": "useUnmountedRef",
      "description": "获取当前组件是否已经卸载的 Hook。"
    },
    {
      "name": "useUpdateEffect",
      "description": "`useUpdateEffect` 用法等同于 `useEffect`，但是会忽略首次执行，只在依赖更新时执行。"
    }
  ]
}
